name: Version and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type (major, minor, patch, or leave empty for auto-detect)'
        required: false
        type: choice
        options:
          - ''
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: read

jobs:
  version-and-release:
    name: Determine Version and Create Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Get latest tag
        id: latest_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Analyze commits for version bump
        id: analyze
        run: |
          # Get commits since last tag
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"

          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s" main)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD)
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # Check for breaking changes (BREAKING CHANGE: or !)
          if echo "$COMMITS" | grep -iE "^[a-z]+(\(.+\))?!:|BREAKING CHANGE:" > /dev/null; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
            echo "Detected: MAJOR (breaking changes)"
          # Check for features (feat:)
          elif echo "$COMMITS" | grep -iE "^feat(\(.+\))?:" > /dev/null; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
            echo "Detected: MINOR (new features)"
          # Check for fixes, chores, docs, etc.
          elif echo "$COMMITS" | grep -iE "^(fix|chore|docs|style|refactor|perf|test)(\(.+\))?:" > /dev/null; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "Detected: PATCH (fixes/chores)"
          else
            echo "bump_type=none" >> $GITHUB_OUTPUT
            echo "No conventional commits found - skipping version bump"
          fi

      - name: Determine version bump
        id: version
        run: |
          MANUAL_BUMP="${{ github.event.inputs.version_bump }}"
          AUTO_BUMP="${{ steps.analyze.outputs.bump_type }}"

          # Manual bump takes precedence
          if [ -n "$MANUAL_BUMP" ]; then
            BUMP_TYPE="$MANUAL_BUMP"
            echo "Using manual bump type: $BUMP_TYPE"
          else
            BUMP_TYPE="$AUTO_BUMP"
            echo "Using auto-detected bump type: $BUMP_TYPE"
          fi

          if [ "$BUMP_TYPE" = "none" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "No version bump needed"
            exit 0
          fi

          # Bump version using poetry
          echo "Bumping version: $BUMP_TYPE"
          poetry version $BUMP_TYPE

          NEW_VERSION=$(poetry version -s)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version_changed=true" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Commit version bump
        if: steps.version.outputs.version_changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION"
          git push

      - name: Create git tag
        if: steps.version.outputs.version_changed == 'true'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
          git push origin "v$NEW_VERSION"

      - name: Generate changelog
        if: steps.version.outputs.version_changed == 'true'
        id: changelog
        run: |
          LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          echo "# Release v$NEW_VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Get commits since last tag
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s|%h|%an" main)
          else
            COMMITS=$(git log --pretty=format:"%s|%h|%an" ${LATEST_TAG}..v${NEW_VERSION})
          fi

          # Categorize commits
          echo "## Features" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^feat(\(.+\))?:" | sed 's/^feat\(([^)]*)\)\?: /- **\1:** /' | sed 's/^feat: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Bug Fixes" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^fix(\(.+\))?:" | sed 's/^fix\(([^)]*)\)\?: /- **\1:** /' | sed 's/^fix: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Documentation" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^docs(\(.+\))?:" | sed 's/^docs\(([^)]*)\)\?: /- **\1:** /' | sed 's/^docs: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Performance Improvements" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^perf(\(.+\))?:" | sed 's/^perf\(([^)]*)\)\?: /- **\1:** /' | sed 's/^perf: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Refactoring" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^refactor(\(.+\))?:" | sed 's/^refactor\(([^)]*)\)\?: /- **\1:** /' | sed 's/^refactor: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Testing" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^test(\(.+\))?:" | sed 's/^test\(([^)]*)\)\?: /- **\1:** /' | sed 's/^test: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Chores" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^chore(\(.+\))?:" | sed 's/^chore\(([^)]*)\)\?: /- **\1:** /' | sed 's/^chore: /- /' || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "## Breaking Changes" >> RELEASE_NOTES.md
          echo "$COMMITS" | grep -iE "^[a-z]+(\(.+\))?!:|BREAKING CHANGE:" || echo "None" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          cat RELEASE_NOTES.md

      - name: Create GitHub Release
        if: steps.version.outputs.version_changed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
