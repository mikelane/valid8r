name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      test_pypi:
        description: 'Publish to Test PyPI instead of PyPI'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  check-version:
    name: Check Version Not Already Published
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.get_version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get package version
        id: get_version
        run: |
          VERSION=$(poetry version -s)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check if version exists on PyPI
        id: check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          PACKAGE_NAME="valid8r"

          # Check if version exists on PyPI
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://pypi.org/pypi/$PACKAGE_NAME/$VERSION/json")

          if [ "$HTTP_CODE" = "200" ]; then
            echo "Version $VERSION already exists on PyPI"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not found on PyPI, will publish"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build Distribution
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Build package
        run: poetry build

      - name: List built files
        run: |
          echo "Built distributions:"
          ls -lh dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  test-built-package:
    name: Test Built Package
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Install wheel
        run: |
          pip install dist/*.whl

      - name: Test import
        run: |
          python -c "import valid8r; print(f'valid8r imported successfully')"
          python -c "from valid8r import parsers, validators, Maybe; print('Core imports successful')"

      - name: Run smoke tests
        run: |
          python << 'EOF'
          from valid8r import parsers, validators
          from valid8r.core.maybe import Success, Failure

          # Test basic parsing
          result = parsers.parse_int("42")
          assert isinstance(result, Success)
          assert result.value_or(0) == 42

          # Test validation
          validator = validators.minimum(0) & validators.maximum(100)
          result = validator(50)
          assert isinstance(result, Success)

          print("Smoke tests passed!")
          EOF

  publish-pypi:
    name: Publish to PyPI
    needs: [check-version, build, test-built-package]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_pypi != 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/valid8r

    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

      - name: Verify publication
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          echo "Waiting for package to be available on PyPI..."
          sleep 30

          # Try to install from PyPI
          pip install valid8r==$VERSION
          python -c "import valid8r; print(f'Successfully installed valid8r {valid8r.__version__ if hasattr(valid8r, \"__version__\") else VERSION}')"

  publish-test-pypi:
    name: Publish to Test PyPI
    needs: [check-version, build, test-built-package]
    if: |
      needs.check-version.outputs.should_publish == 'true' &&
      github.event.inputs.test_pypi == 'true'
    runs-on: ubuntu-latest
    environment:
      name: test-pypi
      url: https://test.pypi.org/p/valid8r

    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          skip-existing: true
          verbose: true

  notify-slack:
    name: Notify Release
    needs: [publish-pypi, check-version]
    if: always() && needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Notify success
        if: needs.publish-pypi.result == 'success'
        run: |
          echo "Successfully published valid8r v${{ needs.check-version.outputs.version }} to PyPI!"
          echo "View at: https://pypi.org/project/valid8r/${{ needs.check-version.outputs.version }}/"

      - name: Notify failure
        if: needs.publish-pypi.result == 'failure'
        run: |
          echo "Failed to publish valid8r v${{ needs.check-version.outputs.version }} to PyPI"
          exit 1
